version: '3'

services:
    db:
        image: postgres
        restart: always
        env_file: ./server/.env
        environment:
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_DB: ${POSTGRES_DB}
        ports:
            - ${POSTGRES_PORT}:${POSTGRES_PORT}
        volumes:
            - ./pgdata:/var/lib/postgresql/data

    redis:
        container_name: redis
        image: redis
        restart: always
        ports:
            - ${REDIS_PORT}:6379

    client:
        restart: unless-stopped
        depends_on:
            - server
        build:
            context: ./client
        ports:
            - 3000:3000

    server:
        restart: unless-stopped
        depends_on:
            - db
            - redis
        build:
            context: ./server
        ports:
            - 5000:5000
        env_file: ./server/.env
        environment:
            CLIENT_URL: ${CLIENT_URL}
            API_URL: ${API_URL}
            PORT: ${PORT}
            AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
            AWS_S3_BUCKET_REGION: ${AWS_S3_BUCKET_REGION}
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY_ID: ${AWS_SECRET_ACCESS_KEY_ID}
            SMTP_HOST: ${SMTP_HOST}
            SMTP_PORT: ${SMTP_PORT}
            SMTP_USER: ${SMTP_USER}
            SMTP_PASSWORD: ${SMTP_PASSWORD}
            JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
            JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
            GOOGlE_CLIENT_ID: ${GOOGlE_CLIENT_ID}
            GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
            SESSION_SECRET: ${SESSION_SECRET}
            REDIS_PORT: ${REDIS_PORT}
            POSTGRES_HOST: ${POSTGRES_HOST}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_PORT: ${POSTGRES_PORT}

    caddy:
        image: caddy
        restart: unless-stopped
        ports:
            - 80:80
            - 443:443
        volumes:
            - ./caddy/Caddyfile:/etc/caddy/Caddyfile
            - ./caddy/data/:/data/
            - ./caddy/config/:/config/

    # nginx:
    #     container_name: nginx
    #     image: nginx
    #     restart: unless-stopped
    #     ports:
    #         - 80:80
    #         - 443:443
    #     volumes:
    #         - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    #         - ./certbot/conf:/etc/letsencrypt
    #         - ./certbot/www:/var/www/certbot
    #     depends_on:
    #         - client
    #         - server

    # certbot:
    #     container_name: certbot
    #     image: certbot/certbot
    #     command: certonly --webroot -w /var/www/certbot --email vladgeina@gmail.com --agree-tos -d auto-sale.anyeg.me -d api.auto-sale.anyeg.me
    #     volumes:
    #         - ./certbot/conf:/etc/letsencrypt
    #         - ./certbot/www:/var/www/certbot
# run command: docker-compose -f docker-compose.prod.yml --env-file server/.env up -d
# run with build command: docker-compose -f docker-compose.prod.yml --env-file server/.env up -d --build
# build command: docker-compose -f docker-compose.prod.yml --env-file server/.env build
# stop command: docker-compose -f docker-compose.prod.yml down
